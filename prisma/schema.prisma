generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model address {
  addressline1 String
  addressline2 String
  area         String?
  city         String
  country      String
  created_at   DateTime @default(now())
  id           String   @id @default(uuid())
  pincode      Int
  state        String
  street       String
  updated_at   DateTime @updatedAt
  user_id      String?
  admin_id     String?
  user         user?    @relation(fields: [user_id], references: [id])
  admin        admin?   @relation(fields: [admin_id], references: [id])
}

model cart {
  created_at DateTime    @default(now())
  id         String      @id @default(uuid())
  order_id   String?
  quantity   Int
  status     cart_status
  updated_at DateTime    @updatedAt
  user_id    String
  price      Int         @default(0)
  order      order?      @relation(fields: [order_id], references: [id])
  product    product[]
  user       user        @relation(fields: [user_id], references: [id])
}

model order {
  created_at     DateTime     @default(now())
  customer_email String
  customer_name  String
  id             String       @id @default(uuid())
  status         order_status
  updated_at     DateTime     @updatedAt
  user_id        String
  user           user         @relation(fields: [user_id], references: [id])
  cart           cart[]
}

model product {
  category         String?
  created_at       DateTime @default(now())
  description      String
  id               String   @id @default(uuid())
  image            String?
  name             String
  price            Int
  weight           String   @default("/kg")
  quantity         Int
  location         String   @default("0km")
  updated_at       DateTime @updatedAt
  user_id          String   @default("")
  productOwnerName String   @default("")
  admin_id         String

  //RelationShips
  cart         cart[]
  purchase     purchase[]
  productOwner admin      @relation(fields: [admin_id], references: [id])
}

model user {
  created_at      DateTime @default(now())
  email           String   @unique
  user_name       String
  hashed_password String
  role            String   @default("USER")
  id              String   @id @default(uuid())
  mobile          String?
  updated_at      DateTime @updatedAt
  reviewRate      Int?     @default(0) @map("IF(role='ADMIN',reviewRate,NULL)")

  // Relationships
  address  address[]
  cart     cart[]
  order    order[]
  purchase purchase[]
  reviews  review[]   @relation("UserReviews")
}

model purchase {
  id          String   @id @default(uuid())
  productId   String
  userId      String
  quantity    Int
  totalCost   Int
  purchasedAt DateTime @default(now())

  // Relationships
  product product @relation(fields: [productId], references: [id])
  user    user    @relation(fields: [userId], references: [id])
}

model admin {
  created_at      DateTime  @default(now())
  email           String    @unique
  user_name       String
  hashed_password String
  role            String    @default("ADMIN")
  id              String    @id @default(uuid())
  mobile          String?
  updated_at      DateTime  @updatedAt
  // Relationships
  address         address[]
  reviews         review[]  @relation("AdminReviews")
  productsSold    product[]
}

model review {
  id         String   @id @default(uuid())
  userId     String
  adminId    String
  starRating Int      @default(0)
  feedback   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationships
  user  user  @relation("UserReviews", fields: [userId], references: [id])
  admin admin @relation("AdminReviews", fields: [adminId], references: [id])
}

enum cart_status {
  draft
  success
}

enum order_status {
  cancelled
  delivered
  draft
  failed
  in_progress
  on_hold
  pending
  refunded
  return_to_seller
  returned
  shipped
}

// enum Role {
//   USER
//   ADMIN
// }

// model Account {
//   id                String  @id @default(cuid())
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? @db.Text
//   access_token      String? @db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.Text
//   session_state     String?

//   user user @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }
